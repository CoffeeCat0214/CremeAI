service: creme-brulee-chatbot

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  environment:
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    REDIS_HOST: ${env:REDIS_HOST}
    REDIS_PORT: ${env:REDIS_PORT}
    DYNAMODB_TABLE: ${env:DYNAMODB_TABLE}
    DISCORD_PUBLIC_KEY: ${env:DISCORD_PUBLIC_KEY}
    ENVIRONMENT: prod
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: 
        - !GetAtt ChatHistoryTable.Arn
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: 
        - "arn:aws:logs:*:*:*"

functions:
  api:
    handler: lambda_handler.lambda_handler
    events:
      - http:
          path: /{proxy+}
          method: any
    timeout: 30
    memorySize: 256
    provisionedConcurrency: 2

  discord:
    handler: discord_lambda.lambda_handler
    events:
      - http:
          path: /discord/interactions
          method: post
          cors: true
    timeout: 15
    memorySize: 256
    environment:
      DISCORD_PUBLIC_KEY: ${env:DISCORD_PUBLIC_KEY}

    vpc:
      securityGroupIds:
        - sg-xxxxxxxxxxxxxx
      subnetIds:
        - subnet-xxxxxxxxxxxxxx

resources:
  Resources:
    ChatHistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST 